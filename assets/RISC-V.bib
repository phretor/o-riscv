@misc{-OpenHWGroup,
  title = {{{OpenHW Group}}},
  author = {{-}},
  journal = {OpenHW Group},
  urldate = {2024-06-07},
  abstract = {OpenHW Group is a not-for-profit, global organization driven by its members and individual contributors where hardware and software designers collaborate on {\dots}},
  howpublished = {https://www.openhwgroup.org/},
  langid = {english},
  keywords = {archived},
  annotation = {https://web.archive.org/web/20240607034220/https://www.openhwgroup.org/},
  file = {/Users/u/Zotero/storage/MZGBUGFV/www.openhwgroup.org.html}
}

@misc{aleksanderkrimskyRISCVSingleBoard,
  title = {{{RISC-V Single Board Computers}}},
  author = {{Aleksander Krimsky}},
  journal = {Krimsky.net},
  urldate = {2024-05-22},
  howpublished = {http://krimsky.net/articles/riscvsbc.html},
  file = {/Users/u/Zotero/storage/VP2D2L79/riscvsbc.html}
}

@misc{alexbradburyCommerciallyAvailableRISCV,
  title = {Commercially Available {{RISC-V}} Silicon},
  author = {{Alex Bradbury}},
  journal = {Muxup},
  urldate = {2024-06-04},
  abstract = {An attempt to enumerate all the RISC-V silicon available to buy today},
  howpublished = {https://muxup.com/2023q1/commercially-available-risc-v-silicon},
  langid = {english},
  keywords = {archived},
  annotation = {https://web.archive.org/web/20240604013515/https://muxup.com/2023q1/commercially-available-risc-v-silicon},
  file = {/Users/u/Zotero/storage/5HAPMYYK/commercially-available-risc-v-silicon.html}
}

@misc{ANGELRISCVJS,
  title = {{{ANGEL}} - {{RISC-V JS ISA Simulator}}},
  urldate = {2024-05-22},
  howpublished = {https://sagark.org/angel/\#},
  file = {/Users/u/Zotero/storage/A3HWKZCH/angel.html}
}

@misc{Architecture1005RISCV,
  title = {Architecture 1005: {{RISC-V Assembly}}},
  shorttitle = {Architecture 1005},
  urldate = {2024-04-06},
  abstract = {This class teaches RISC-V assembly language. It requires you know C programming.},
  howpublished = {https://p.ost2.fyi/courses/course-v1:OpenSecurityTraining2+Arch1005\_IntroRISCV+2024\_v1/about},
  langid = {english},
  keywords = {archived},
  annotation = {https://web.archive.org/web/20240406050317/https://p.ost2.fyi/courses/course-v1:OpenSecurityTraining2+Arch1005\_IntroRISCV+2024\_v1/about},
  file = {/Users/u/Zotero/storage/P7DKJFCI/about.html}
}

@book{borinIntroductionAssemblyProgramming2023,
  title = {An {{Introduction}} to {{Assembly Programming}} with {{RISC-V}}},
  author = {Borin, Prof Edson},
  year = {2023},
  month = oct,
  publisher = {Independently published},
  address = {Campinas, SP},
  abstract = {An Introduction to Assembly Programming with RISC-V is a textbook for programmers that want to learn how to program in assembly language. It leverages the RISC-V ISA to guide the reader through the main concepts of assembly programming and the assembly process.The book is divided into three parts: I) Fundamental concepts, II) User-level programming, and III) System-level programming.The first part, "fundamental concepts", starts by providing a brief overview of how computers are organized and how programs are executed by computers. Then, it discusses how data is represented on modern computers, including how numbers and text are represented, how data is organized on the main memory, and how computer instructions are encoded. Next, it discusses how native programs are generated, the assembly process, and the main elements of object (binary) files, including symbols, labels, and references. Finally, it introduces the main elements of the assembly language and some of the most common assembly directives. It is worth noting that most of the concepts introduced in this part are orthogonal to the RISC-V ISA, i.e., they do not change when programming in assembly language for other ISAs.The second part, "user-level programming", focuses on the implementation of user software, i.e., software that performs operations with data that is located on CPU registers and the main memory. It starts by presenting the basic elements of the RISC-V ISA, including the data types, registers, and instructions. Then, it shows how to use RISC-V instructions to implement basic control-flow sentences, such as conditionals and loops. Finally, it introduces the program stack, shows how to implement routines, and discusses the elements of the ABI and how it facilitates software composition. All examples in this part of the book rely on system calls to perform I/O operations.The third part focus on system-level programming, including interacting with peripherals and securing the system against faulty or malicious user programs. It starts by presenting how to write code to directly interact with input and output hardware devices and the concept of busy waiting. Then, it motivates the need for hardware interrupts and shows how to program them on RISC-V ISAs. Finally, it discusses privilege levels and how software interrupts and exceptions may be used to protect RISC-V systems from faulty or malicious user programs.},
  isbn = {9786500158113},
  langid = {english}
}

@misc{BuicsgProcessorFuzz2024,
  title = {Bu-Icsg/{{ProcessorFuzz}}},
  year = {2024},
  month = may,
  urldate = {2024-06-07},
  copyright = {Apache-2.0},
  howpublished = {Integrated Circuits and Systems Group at Boston University},
  keywords = {archived}
}

@inproceedings{canakciProcessorFuzzProcessorFuzzing2023,
  title = {{{ProcessorFuzz}}: {{Processor Fuzzing}} with {{Control}} and {{Status Registers Guidance}}},
  shorttitle = {{{ProcessorFuzz}}},
  booktitle = {2023 {{IEEE International Symposium}} on {{Hardware Oriented Security}} and {{Trust}} ({{HOST}})},
  author = {Canakci, Sadullah and Rajapaksha, Chathura and Delshadtehrani, Leila and Nataraja, Anoop and Taylor, Michael Bedford and Egele, Manuel and Joshi, Ajay},
  year = {2023},
  month = may,
  pages = {1--12},
  issn = {2765-8406; https://web.archive.org/web/20240607034727/https://ieeexplore.ieee.org/document/10133714},
  doi = {10.1109/HOST55118.2023.10133714},
  urldate = {2024-06-07},
  abstract = {As the complexity of modern processors has increased over the years, developing effective verification strategies to identify bugs prior to manufacturing has become critical. Inspired by software fuzzing, a technique commonly used for software testing, multiple recent works use hardware fuzzing for the verification of Register-Transfer Level (RTL) designs. However, these works suffer from several limitations such as lack of support for widelyused Hardware Description Languages (HDLs) and misleading coverage-signals that misidentify ``interesting'' inputs. Towards overcoming these shortcomings, we present ProcessorFuzz, a processor fuzzer that guides the fuzzer with a novel CSR-transition coverage metric. ProcessorFuzz monitors the transitions in Control and Status Registers (CSRs) as CSRs are in charge of controlling and holding the state of the processor. Therefore, transitions in CSRs indicate a new processor state, and guiding the fuzzer based on this feedback enables ProcessorFuzz to explore new processor states. We evaluated ProcessorFuzz with three real-world opensource processors --- Rocket, BOOM, and BlackParrot. ProcessorFuzz triggered a set of ground-truth bugs 1.23 {\textbackslash}times faster (on average) than DIFUZZRTL. Moreover, our experiments exposed 8 new bugs across the three RISC-V cores and one new bug in a reference model. All nine bugs were confirmed by the developers of the corresponding projects.},
  keywords = {archived},
  file = {/Users/u/Zotero/storage/3Z2UBWKG/Canakci et al. - 2023 - ProcessorFuzz Processor Fuzzing with Control and .pdf}
}

@misc{cascade-artifacts-designsCascadeartifactsdesignsCascademeta2024,
  title = {Cascade-Artifacts-Designs/Cascade-Meta},
  author = {{cascade-artifacts-designs}},
  year = {2024},
  month = may,
  urldate = {2024-06-07},
  keywords = {archived}
}

@misc{CascadeCPUFuzzing,
  title = {Cascade: {{CPU Fuzzing}} via {{Intricate Program Generation}}},
  shorttitle = {Cascade},
  journal = {Computer Security Group},
  urldate = {2024-05-22},
  abstract = {TL;DR Cascade is a RISC-V CPU fuzzer that generates valid, long and complex programs, and relies on a termination cascade-effect for bug detection. It detected 37 new bugs (29 new CVEs) in 5 RISC-V CPUs, which is more than all the existing fuzzers, combined. You can read a paper we wrote on Cascade here and{\dots} Read},
  langid = {american},
  file = {/Users/u/Zotero/storage/9R4IX9RF/cascade-cpu-fuzzing-via-intricate-program-generation.html}
}

@inproceedings{chenHyPFuzzFormalAssistedProcessor2023,
  title = {{{HyPFuzz}}: {{Formal-Assisted Processor Fuzzing}}},
  booktitle = {{{USENIX Security}} 2023},
  author = {Chen, Chen and Kande, Rahul and Nguyen, Nathan and Andersen, Flemming and Tyagi, Aakash and Sadeghi, Ahmad-Reza and Rajendran, Jeyavijayan},
  year = {2023},
  abstract = {Recent research has shown that hardware fuzzers can effectively detect security vulnerabilities in modern processors. However, existing hardware fuzzers do not fuzz well the hardto-reach design spaces. Consequently, these fuzzers cannot effectively fuzz security-critical control- and data-flow logic in the processors, hence missing security vulnerabilities.},
  langid = {english},
  file = {/Users/u/Zotero/storage/K56RQJNX/Chen et al. - HyPFuzz Formal-Assisted Processor Fuzzing.pdf}
}

@misc{CompsecsnuDifuzzrtl2024,
  title = {Compsec-Snu/Difuzz-Rtl},
  year = {2024},
  month = apr,
  urldate = {2024-06-07},
  copyright = {BSD-3-Clause},
  howpublished = {Systems and Software Security Lab at Seoul National University (SNU)},
  keywords = {archived}
}

@misc{DARPATakesRISCV2019,
  title = {{{DARPA Takes RISC-V SSITH Voting Machine Prototype}} to {{DEF CON}} 2019},
  year = {2019},
  month = aug,
  journal = {AB Open},
  urldate = {2024-05-22},
  abstract = {The US Defence Advanced Research Projects Agency (DARPA) has unveiled the first prototype of its System Security Integrated Through Hardware and Firmware},
  howpublished = {https://abopen.com/news/darpa-takes-risc-v-ssith-voting-machine-prototype-to-def-con-2019/},
  langid = {american},
  keywords = {archived},
  annotation = {https://web.archive.org/web/20240522053547/https://abopen.com/news/darpa-takes-risc-v-ssith-voting-machine-prototype-to-def-con-2019/},
  file = {/Users/u/Zotero/storage/2LMPJ7KQ/darpa-takes-risc-v-ssith-voting-machine-prototype-to-def-con-2019.html}
}

@misc{DARPAUnveilsFirst,
  title = {{{DARPA}} Unveils First {{SSITH}} Prototype to Mitigate Hardware Flaws {\textbar} {{TechTarget}}},
  journal = {Security},
  urldate = {2024-05-22},
  abstract = {DARPA unveiled its first SSITH prototype at DEF CON and said the goal was to block hardware attacks at the source and mitigate the need for patches, but one expert is unconvinced the effort will succeed.},
  howpublished = {https://www.techtarget.com/searchsecurity/news/252469138/DARPA-unveils-first-SSITH-prototype-to-mitigate-hardware-flaws},
  langid = {english},
  keywords = {archived},
  annotation = {https://web.archive.org/web/20240522053537/https://www.techtarget.com/searchsecurity/news/252469138/DARPA-unveils-first-SSITH-prototype-to-mitigate-hardware-flaws},
  file = {/Users/u/Zotero/storage/5QCZHTGP/DARPA-unveils-first-SSITH-prototype-to-mitigate-hardware-flaws.html}
}

@misc{drewbarbierRISCVSecurityArchitecture,
  title = {{{RISC-V Security Architecture Introduction}}},
  author = {{Drew Barbier}},
  urldate = {2024-04-06},
  howpublished = {https://sifive-china.oss-cn-zhangjiakou.aliyuncs.com/\%E8\%A5\%BF\%E5\%AE\%89\%E7\%8F\%A0\%E6\%B5\%B7\%E6\%9D\%AD\%E5\%B7\%9E\%E5\%90\%88\%E8\%82\%A5ppt/04\%20hujin\%20RISC-V\%20Security\%20Architecture\%20Introduction\_4\%20City.pdf},
  file = {/Users/u/Zotero/storage/82T3T7IA/04 hujin RISC-V Security Architecture Introduction_4 City.pdf}
}

@misc{ExchangeRISCVInternational,
  title = {Exchange -- {{RISC-V International}}},
  urldate = {2024-05-22},
  langid = {american},
  keywords = {archived},
  annotation = {https://web.archive.org/web/20240522060123/https://riscv.org/exchange/},
  file = {/Users/u/Zotero/storage/L6FWHZVF/exchange.html}
}

@misc{farseerRISCVAssemblyTutorial2022,
  title = {{{RISC-V Assembly Tutorial}}},
  author = {{farseer}},
  year = {2022},
  month = apr,
  journal = {RISC-V},
  urldate = {2024-04-06},
  abstract = {RISC-V assembly language is like any other assembly and especially resembles MIPS. Just like any assembly, we have a list of instructions that incrementally get us closer to our solution. We will be using the~riscv-g++~compiler and linking C++ files with assembly files. You will write the assembly files, and the C++ files},
  langid = {american},
  keywords = {archived},
  annotation = {https://web.archive.org/web/20240406052157/https://www.riscfive.com/2022/04/28/risc-v-assembly-tutorial/},
  file = {/Users/u/Zotero/storage/T53Q7NM9/risc-v-assembly-tutorial.html}
}

@misc{farseerRISCVExampleAssembly2022,
  title = {{{RISC-V Example Assembly Programs}}},
  author = {{farseer}},
  year = {2022},
  month = oct,
  journal = {RISC-V},
  urldate = {2024-04-06},
  abstract = {Here is a list of example Assembly langauge programs developed by Stephen Marz. You can look at the complete examples on his website here ~ Find String Length in RISC-V Assembly First we write the program in plain C int strlen(const char *str) \{   int i;   for (i = 0;str != '{\textbackslash}0';i++);   return i; \}  Here},
  langid = {american},
  keywords = {archived},
  annotation = {https://web.archive.org/web/20240406052147/https://www.riscfive.com/2022/10/27/risc-v-example-assembly-programs/},
  file = {/Users/u/Zotero/storage/GWDNHS7D/risc-v-example-assembly-programs.html}
}

@misc{farseerRISCVRISCVForum,
  title = {{{RISC-V}} -- {{RISC-V Forum}} and {{Help}}},
  author = {{farseer}},
  journal = {RISC-V},
  urldate = {2024-04-06},
  howpublished = {https://www.riscfive.com/},
  langid = {american},
  keywords = {archived},
  annotation = {https://web.archive.org/web/20240406052021/https://www.riscfive.com/},
  file = {/Users/u/Zotero/storage/5TIQU8UW/www.riscfive.com.html}
}

@misc{gedarebloomComputerOrganizationDesign,
  title = {Computer {{Organization}} and {{Design}} with {{RISC-V}}},
  author = {{Gedare Bloom}},
  urldate = {2024-04-06},
  abstract = {Enjoy the videos and music you love, upload original content, and share it all with friends, family, and the world on YouTube.},
  howpublished = {https://www.youtube.com/},
  langid = {english},
  keywords = {archived},
  annotation = {https://web.archive.org/web/20240406042319/https://www.youtube.com/},
  file = {/Users/u/Zotero/storage/NA95UKZG/playlist.html}
}

@misc{goldmanHowSecureAre2023,
  title = {How {{Secure Are RISC-V Chips}}?},
  author = {Goldman, Jeff},
  year = {2023},
  month = jan,
  journal = {Semiconductor Engineering},
  urldate = {2024-04-06},
  abstract = {Open source by itself doesn't guarantee security. It still comes down to the fundamentals of design.},
  howpublished = {https://semiengineering.com/how-secure-are-risc-v-chips/},
  langid = {american},
  keywords = {archived},
  annotation = {https://web.archive.org/web/20240406053651/https://semiengineering.com/how-secure-are-risc-v-chips/}
}

@misc{GoogleinternsHwfuzzing2024a,
  title = {Googleinterns/Hw-Fuzzing},
  year = {2024},
  month = jun,
  urldate = {2024-06-07},
  copyright = {Apache-2.0},
  howpublished = {Google Interns},
  keywords = {archived}
}

@misc{grehackGreHack2022Reverse2022,
  title = {{{GreHack}} 2022: {{Reverse Engineering Of RISC-V MCU With USB3}} \& {{Hi Speed Peripherals}} by {{Benjamin Vernoux}}},
  shorttitle = {{{GreHack}} 2022},
  author = {{GreHack}},
  year = {2022},
  month = nov,
  urldate = {2024-05-22},
  keywords = {archived},
  annotation = {https://web.archive.org/web/20240522071010/https://www.youtube.com/watch?v=TJ6QVevsiyc}
}

@book{harrisDigitalDesignComputer2021,
  title = {Digital {{Design}} and {{Computer Architecture}}, {{RISC-V Edition}}: {{RISC-V Edition}}},
  shorttitle = {Digital {{Design}} and {{Computer Architecture}}, {{RISC-V Edition}}},
  author = {Harris, Sarah and Harris, David},
  year = {2021},
  month = oct,
  edition = {1st edition},
  publisher = {Morgan Kaufmann},
  address = {Philadelphia},
  abstract = {The newest addition to the Harris and Harris family of Digital Design and Computer Architecture books, this RISC-V Edition covers the fundamentals of digital logic design and reinforces logic concepts through the design of a RISC-V microprocessor. Combining an engaging and humorous writing style with an updated and hands-on approach to digital design, this book takes the reader from the fundamentals of digital logic to the actual design of a processor. By the end of this book, readers will be able to build their own RISC-V microprocessor and will have a top-to-bottom understanding of how it works.Beginning with digital logic gates and progressing to the design of combinational and sequential circuits, this book uses these fundamental building blocks as the basis for designing a RISC-V processor. SystemVerilog and VHDL are integrated throughout the text in examples illustrating the methods and techniques for CAD-based circuit design. The companion website includes a chapter on I/O systems with practical examples that show how to use SparkFun's RED-V RedBoard to communicate with peripheral devices such as LCDs, Bluetooth radios, and motors.This book will be a valuable resource for students taking a course that combines digital logic and computer architecture or students taking a two-quarter sequence in digital logic and computer organization/architecture. Covers the fundamentals of digital logic design and reinforces logic concepts through the design of a RISC-V microprocessorGives students a full understanding of the RISC-V instruction set architecture, enabling them to build a RISC-V processor and program the RISC-V processor in hardware simulation, software simulation, and in hardwareIncludes both SystemVerilog and VHDL designs of fundamental building blocks as well as of single-cycle, multicycle, and pipelined versions of the RISC-V architectureFeatures a companion website with a bonus chapter on I/O systems with practical examples that show how to use SparkFun's RED-V RedBoard to communicate with peripheral devices such as LCDs, Bluetooth radios, and motorsThe companion website also includes appendices covering practical digital design issues and C programming as well as links to CAD tools, lecture slides, laboratory projects, and solutions to exercisesSee the companion EdX MOOCs ENGR85A and ENGR85B with video lectures and interactive problems},
  isbn = {978-0-12-820064-3},
  langid = {english}
}

@misc{hex-fiveRISCVSecurityArm2019,
  title = {{{RISC-V Security}} - {{Arm}}{\textregistered} {{TrustZone}}{\textregistered} {{Technology}} vs {{RISC-V MultiZoneTM Security}}},
  author = {{HEX-Five}},
  year = {2019},
  month = apr,
  urldate = {2024-04-06},
  file = {/Users/u/Zotero/storage/YRKZBZK4/RISC-V-Security-Multizone-v-TrustZone-April-19.pdf}
}

@inproceedings{hurDifuzzRTLDifferentialFuzz2021,
  title = {{{DifuzzRTL}}: {{Differential Fuzz Testing}} to {{Find CPU Bugs}}},
  shorttitle = {{{DifuzzRTL}}},
  booktitle = {{{IEEE Symposium}} on {{Security}} and {{Privacy}} ({{SP}})},
  author = {Hur, Jaewon and Song, Suhwan and Kwon, Dongup and Baek, Eunjin and Kim, Jangwoo and Lee, Byoungyoung},
  year = {2021},
  pages = {1286--1303},
  publisher = {IEEE Computer Society},
  doi = {10.1109/SP40001.2021.00103},
  urldate = {2024-06-07},
  abstract = {Security bugs in CPUs have critical security impacts to all the computation related hardware and software components as it is the core of the computation. In spite of the fact that architecture and security communities have explored a vast number of static or dynamic analysis techniques to automatically identify such bugs, the problem remains unsolved and challenging largely due to the complex nature of CPU RTL designs.This paper proposes DIFUZZRTL, an RTL fuzzer to automatically discover unknown bugs in CPU RTLs. DIFUZZRTL develops a register-coverage guided fuzzing technique, which efficiently yet correctly identifies a state transition in the finite state machine of RTL designs. DIFUZZRTL also develops several new techniques in consideration of unique RTL design characteristics, including cycle-sensitive register coverage guiding, asynchronous interrupt events handling, a unified CPU input format with Tilelink protocols, and drop-in-replacement designs to support various CPU RTLs. We implemented DIFUZZRTL, and performed the evaluation with three real-world open source CPU RTLs: OpenRISC Mor1kx Cappuccino, RISC-V Rocket Core, and RISC-V Boom Core. During the evaluation, DIFUZZRTL identified 16 new bugs from these CPU RTLs, all of which were confirmed by the respective development communities and vendors. Six of those are assigned with CVE numbers, and to the best of our knowledge, we reported the first and the only CVE of RISC-V cores, demonstrating its strong practical impacts to the security community.},
  isbn = {978-1-72818-934-5},
  langid = {english},
  keywords = {archived},
  annotation = {https://web.archive.org/web/20240607015116/https://www.computer.org/csdl/proceedings-article/sp/2021/893400b778/1t0x9G4Q5MI},
  file = {/Users/u/Zotero/storage/JAVVFZXH/Hur et al. - 2021 - DifuzzRTL Differential Fuzz Testing to Find CPU B.pdf}
}

@misc{jagantekiIntroductionRISCVBoot2019,
  title = {An {{Introduction}} to {{RISC-V Boot}} Flow: {{Overview}}, {{Blob}} vs {{Blobfree}} Standards},
  author = {{Jagan Teki}},
  year = {2019},
  urldate = {2024-05-22},
  keywords = {archived},
  annotation = {https://web.archive.org/web/20240301064557/https://crvf2019.github.io/pdf/43.pdf},
  file = {/Users/u/Zotero/storage/TGYB4RIM/43.pdf}
}

@inproceedings{laeuferRFUZZCoverageDirectedFuzz2018,
  title = {{{RFUZZ}}: {{Coverage-Directed Fuzz Testing}} of {{RTL}} on {{FPGAs}}},
  shorttitle = {{{RFUZZ}}},
  booktitle = {2018 {{IEEE}}/{{ACM International Conference}} on {{Computer-Aided Design}} ({{ICCAD}})},
  author = {Laeufer, Kevin and Koenig, Jack and Kim, Donggyu and Bachrach, Jonathan and Sen, Koushik},
  year = {2018},
  month = nov,
  pages = {1--8},
  issn = {1558-2434; https://web.archive.org/web/20240607034936/https://ieeexplore.ieee.org/document/8587711},
  doi = {10.1145/3240765.3240842},
  urldate = {2024-06-07},
  abstract = {Dynamic verification is widely used to increase confidence in the correctness of RTL circuits during the pre-silicon design phase. Despite numerous attempts over the last decades to automate the stimuli generation based on coverage feedback, Coverage Directed Test Generation (CDG) has not found the widespread adoption that one would expect. Based on new ideas from the software testing community around coverage-guided mutational fuzz testing, we propose a new approach to the CDG problem which requires minimal setup and takes advantage of FPGA-accelerated simulation for rapid testing. We provide test input and coverage definitions that allow fuzz testing to be applied to RTL circuit verification. In addition we propose and implement a series of transformation passes that make it feasible to reset arbitrary RTL designs quickly, a requirement for deterministic test execution. Alongside this paper we provide rfuzz, a fully featured implementation of our testing methodology which we make available as open-source software to the research community. An empirical evaluation of RFUZZ shows promising results on archiving coverage for a wide range of different RTL designs ranging from communication IPs to an industry scale 64-bit CPU.},
  keywords = {archived},
  file = {/Users/u/Zotero/storage/P63L4T4G/Laeufer et al. - 2018 - RFUZZ Coverage-Directed Fuzz Testing of RTL on FP.pdf}
}

@misc{LearnRiscVAssembly,
  title = {Learn {{Risc-V Assembly Programming}} - {{Lesson1}} : {{For}} Absolute Beginners!},
  shorttitle = {Learn {{Risc-V Assembly Programming}} - {{Lesson1}}},
  urldate = {2024-04-06},
  abstract = {This is the first in a series of tutorials which will teach you how to get started with RiscV (Risc 5) programmingThis tutorial assumes you have no previous ...},
  langid = {english},
  keywords = {archived},
  annotation = {https://web.archive.org/web/20240406050756/https://www.youtube.com/watch?v=bEUMLh2lasE},
  file = {/Users/u/Zotero/storage/7HFQYPBA/playlist.html}
}

@misc{lintonsalmonPerspectiveRoleOpenSource2017,
  title = {A {{Perspective}} on the {{Role}} of {{Open-Source IP In Government Electronic Systems}}},
  author = {{Linton Salmon}},
  year = {2017},
  month = nov,
  urldate = {2024-05-22},
  file = {/Users/u/Zotero/storage/EIPJTAI9/Linton Salmon - 2017 - A Perspective on the Role of Open-Source IP In Gov.pdf}
}

@misc{luSurveyRISCVSecurity2021,
  title = {A {{Survey}} on {{RISC-V Security}}: {{Hardware}} and {{Architecture}}},
  shorttitle = {A {{Survey}} on {{RISC-V Security}}},
  author = {Lu, Tao},
  year = {2021},
  month = jul,
  number = {arXiv:2107.04175},
  eprint = {2107.04175},
  publisher = {arXiv},
  doi = {10.48550/arXiv.2107.04175},
  urldate = {2024-04-06},
  abstract = {The Internet of Things (IoT) is an ongoing technological revolution. Embedded processors are the processing engines of smart IoT devices. For decades, these processors were mainly based on the Arm instruction set architecture (ISA). In recent years, the free and open RISC-V ISA standard has attracted the attention of industry and academia and is becoming the mainstream. Data security and user privacy protection are common challenges faced by all IoT devices. In order to deal with foreseeable security threats, the RISC-V community is studying security solutions aimed at achieving a root of trust (RoT) and ensuring that sensitive information on RISC-V devices is not tampered with or leaked. Many RISC-V security research projects are underway, but the academic community has not yet conducted a comprehensive survey of RISC-V security solutions. In order to fill this research gap, this paper presents an in-depth survey on RISC-V security technologies. This paper summarizes the representative security mechanisms of RISC-V hardware and architecture. Based on our survey, we predict the future research and development directions of RISC-V security. We hope that our research can inspire RISC-V researchers and developers.},
  archiveprefix = {arxiv},
  keywords = {archived},
  file = {/Users/u/Zotero/storage/7I5KHTSX/Lu - 2021 - A Survey on RISC-V Security Hardware and Architec.pdf;/Users/u/Zotero/storage/WXIQEP8M/2107.html}
}

@misc{michaelclarkRv8RISCVSimulator,
  title = {Rv8 - {{RISC-V}} Simulator for X86-64},
  author = {{Michael Clark}},
  journal = {rv8},
  urldate = {2024-05-22},
  abstract = {RISC-V simulator for x86-64},
  howpublished = {https://michaeljclark.github.io/},
  langid = {american},
  file = {/Users/u/Zotero/storage/SATAYBG9/michaeljclark.github.io.html}
}

@misc{MichaeljclarkRiscvprobeSimple,
  title = {Michaeljclark/Riscv-Probe: {{Simple}} Machine Mode Program to Probe {{RISC-V}} Control and Status Registers},
  urldate = {2024-05-22},
  howpublished = {https://github.com/michaeljclark/riscv-probe/tree/master},
  keywords = {archived},
  annotation = {https://web.archive.org/web/20240522073414/https://github.com/michaeljclark/riscv-probe/tree/master},
  file = {/Users/u/Zotero/storage/JPRWGUT9/master.html}
}

@book{pattersonRISCVReaderOpen2017,
  title = {The {{RISC-V Reader}}: {{An Open Architecture Atlas}}},
  shorttitle = {The {{RISC-V Reader}}},
  author = {Patterson, David and Waterman, Andrew},
  year = {2017},
  month = nov,
  publisher = {Strawberry Canyon},
  address = {Berkeley, California},
  abstract = {The RISC-V Reader is a concise introduction and reference for embedded systems programmers, students, and the curious to a modern, popular, open architecture. RISC-V spans from the cheapest 32-bit embedded microcontroller to the fastest 64-bit cloud computer. The text shows how RISC-V followed the good ideas of past architectures while avoiding their mistake.Highlights include:Introduces the RISC-V instruction set in only 100 pages, including 75 figuresAn Instruction Translator Guide to help translate assembly language programs from ARM-32 and x86-32 instruction sets to RISC-V2-page RISC-V Reference Card that summarizes all instructions50-page Instruction Glossary that defines every instruction in detail75 spotlights of good architecture design using margin icons50 sidebars with interesting commentary and RISC-V history25 quotes to pass along wisdom of noted scientists and engineersTen chapters introduce each component of the modular RISC-V instruction set--often contrasting code compiled from C to RISC-V versus the older ARM, Intel, and MIPS architectures--but readers can start programming after Chapter 2.Praise for The RISC-V Reader:``This timely book concisely describes the simple, free and open RISC-V ISA that is experiencing rapid uptake in many different computing sectors.'' Krste Asanovic, University of California, Berkeley, one of the four architects of RISC-V ``I like RISC-V and this book as they are elegant---brief, to the point, and complete.'' C. Gordon Bell, a computer architecture pioneer`` This handy little book effortlessly summarizes all the essential elements of the RISC-V Instruction Set Architecture, a perfect reference guide for students and practitioners alike.'' Professor Randy Katz, University of California, Berkeley, one of the inventors of RAID storage systems ``This clearly-written book offers a good introduction to RISC-V, augmented with insightful comments on its evolutionary history and comparisons with other familiar architectures.'' John Mashey, one of the designers of the MIPS architecture``This book tells what RISC-V can do and why its designers chose to endow it with those abilities.'' Ivan Sutherland, the father of computer graphics ``RISC-V will change the world, and this book will help you become part of that change.'' Professor Michael B. Taylor, University of Washington ``This book will be an invaluable reference for anyone working with the RISC-V ISA.'' Megan Wachs, PhD, SiFive Engineer},
  isbn = {978-0-9992491-1-6},
  langid = {english}
}

@misc{popovic789KBLinux,
  title = {789 {{KB Linux Without MMU}} on {{RISC-V}}},
  author = {Popovic, Uros},
  urldate = {2024-05-22},
  abstract = {A guide on building a tiny Linux (only 789 KB) that requires no MMU and deploying it on a RISC-V system, with custom userspace code.},
  howpublished = {https://popovicu.com/posts/789-kb-linux-without-mmu-riscv/},
  langid = {english}
}

@misc{popovicBareMetalProgramming,
  title = {Bare Metal Programming with {{RISC-V}} Guide},
  author = {Popovic, Uros},
  urldate = {2024-05-22},
  abstract = {Guide on coding a bare metal program with UART output for RISC-V and running the emulation with QEMU. Brief overview of the RISC-V boot process.},
  howpublished = {https://popovicu.com/posts/bare-metal-programming-risc-v/},
  langid = {english}
}

@misc{popovicMakingMicroLinux,
  title = {Making a Micro {{Linux}} Distro},
  author = {Popovic, Uros},
  urldate = {2024-05-22},
  abstract = {A guide on building a simple Linux distribution from scratch. Detailed guide on building the kernel and the init process. Finally, a little distribution is built with u-root that is capable of connecting to the Internet.},
  howpublished = {https://popovicu.com/posts/making-a-micro-linux-distro/},
  langid = {english}
}

@misc{popovicRISCVInterruptsTimer,
  title = {{{RISC-V}} Interrupts with a Timer Example},
  author = {Popovic, Uros},
  urldate = {2024-05-22},
  abstract = {A detailed example of RISC-V interrupts in C through OpenSBI timer infrastructure.},
  howpublished = {https://popovicu.com/posts/risc-v-interrupts-with-timer-example/},
  langid = {english}
}

@misc{popovicRISCVSBIFull,
  title = {{{RISC-V SBI}} and the Full Boot Process},
  author = {Popovic, Uros},
  urldate = {2024-05-22},
  abstract = {Detailed explanation on how RISC-V boot process works and what role SBI has in the RISC-V software stack. Concrete example with OpenSBI.},
  howpublished = {https://popovicu.com/posts/risc-v-sbi-and-full-boot-process/},
  langid = {english}
}

@misc{QemuHwRiscv,
  title = {Qemu/Hw/Riscv/Virt.c at Master {$\cdot$} Qemu/Qemu},
  journal = {GitHub},
  urldate = {2024-05-22},
  abstract = {Official QEMU mirror. Please see https://www.qemu.org/contribute/ for how to submit changes to QEMU. Pull Requests are ignored. Please only use release tarballs from the QEMU website. - qemu/qemu},
  howpublished = {https://github.com/qemu/qemu/blob/master/hw/riscv/virt.c},
  langid = {english}
}

@book{reisRISCVAssemblyLanguage2019,
  title = {{{RISC-V Assembly Language}}},
  author = {Reis, Anthony J. Dos},
  year = {2019},
  month = aug,
  publisher = {Independently published},
  abstract = {Presents RISC-V assembly language with emphasis on system concepts. You will learn not only assembly language programming but also the system concepts necessary to fully understand at the machine level a RISC-V computer that supports RV32I and RV32M. The software package for the book includes a RISC-V assembler/linker/debugger/ interpreter that runs on Windows, Mac OS X, Linux, and Raspbian. It is easy to install (simply unzip the distribution file) and easy to use.},
  isbn = {978-1-08-846200-3},
  langid = {english}
}

@misc{risc-vinternationalCloudVAcceleratingRISCV,
  title = {Cloud-{{V}}: {{Accelerating RISC-V Software Development}} with {{10xEngineers}} -- {{RISC-V International}}},
  shorttitle = {Cloud-{{V}}},
  author = {{RISC-V International}},
  urldate = {2024-06-06},
  langid = {american},
  keywords = {archived},
  annotation = {https://web.archive.org/web/20240606040620/https://riscv.org/blog/2023/08/cloud-v-accelerating-risc-v-software-development-with-10xengineers/},
  file = {/Users/u/Zotero/storage/IJGX8AWK/cloud-v-accelerating-risc-v-software-development-with-10xengineers.html}
}

@misc{RISCVLandscape,
  title = {{{RISC-V Landscape}}},
  journal = {Landscape},
  urldate = {2024-05-22},
  abstract = {The Landscape organizes all RISC-V native open source projects and proprietary products into categories, providing an overview of the current ecosystem},
  howpublished = {https://landscape.riscv.org/},
  langid = {english},
  keywords = {archived},
  annotation = {https://web.archive.org/web/20240522054936/https://landscape.riscv.org/},
  file = {/Users/u/Zotero/storage/8PQJZQ5Q/landscape.riscv.org.html}
}

@misc{risc-vsecuritymodeltaskgroupRISCVSecurityModel,
  title = {{{RISC-V Security Model}}},
  author = {{RISC-V Security Model Task Group}},
  file = {/Users/u/Zotero/storage/PC6W64CC/RISC-V Security Model.pdf}
}

@misc{riscv.orgRISCVReferenceCard2015,
  title = {{{RISC-V Reference Card}}},
  author = {{riscv.org}},
  year = {2015},
  month = oct,
  urldate = {2024-04-06},
  file = {/Users/u/Zotero/storage/JFF34VI8/RISCVGreenCardv8-20151013.pdf}
}

@misc{RISCV2024,
  title = {{{RISC-V}}},
  year = {2024},
  month = may,
  journal = {Wikipedia},
  urldate = {2024-06-04},
  abstract = {RISC-V (pronounced "risk-five":{$\mkern1mu$}1{$\mkern1mu$}) is an open standard instruction set architecture (ISA) based on established reduced instruction set computer (RISC) principles. Unlike most other ISA designs, RISC-V is provided under royalty-free open-source licenses. Many companies are offering or have announced RISC-V hardware; open source operating systems with RISC-V support are available, and the instruction set is supported in several popular software toolchains. The project began in 2010 at the University of California, Berkeley. There are now members in over 70 countries contributing and collaborating to define RISC-V open specifications. RISC-V International, the non-profit managing RISC-V, is currently headquartered in Switzerland.},
  copyright = {Creative Commons Attribution-ShareAlike License},
  howpublished = {https://en.wikipedia.org/wiki/RISC-V},
  langid = {english},
  keywords = {archived},
  annotation = {Page Version ID: 1225479082; https://web.archive.org/web/20240604010625/https://en.wikipedia.org/w/index.php?title=RISC-V\&oldid=1225479082},
  file = {/Users/u/Zotero/storage/7PUENTY8/RISC-V.html}
}

@misc{RiscvadminExchangeDiscussions,
  title = {Riscv-Admin/Exchange {$\cdot$} {{Discussions}} {$\cdot$} {{GitHub}}},
  journal = {GitHub},
  urldate = {2024-05-22},
  abstract = {Explore the GitHub Discussions forum for riscv-admin exchange. Discuss code, ask questions \& collaborate with the developer community.},
  howpublished = {https://github.com/riscv-admin/exchange/discussions},
  langid = {english},
  keywords = {archived},
  annotation = {https://web.archive.org/web/20240522054709/https://github.com/riscv-admin/exchange/discussions},
  file = {/Users/u/Zotero/storage/YXMF67YL/discussions.html}
}

@misc{RiscVAssemblyLanguage2019,
  title = {Risc-{{V Assembly Language Hello World}}},
  year = {2019},
  month = sep,
  journal = {Stephen Smith's Blog},
  urldate = {2024-04-06},
  abstract = {Introduction Last time, we started talking about the Risc-V CPU. We looked at some background and now we are going to start to look at its Assembly Language. We'll write a program to print ``Hello W{\dots}},
  langid = {english},
  keywords = {archived},
  annotation = {https://web.archive.org/web/20240406052711/https://smist08.wordpress.com/2019/09/07/risc-v-assembly-language-hello-world/}
}

@misc{RISCVEmulatorMichael,
  title = {{{RISC-V Emulator}} -- {{Michael T}}. {{Kloos}}},
  urldate = {2024-05-22},
  howpublished = {https://www.michaelkloos.com/my\_projects\_blog/?p=182},
  file = {/Users/u/Zotero/storage/YT2K8X26/my_projects_blog.html}
}

@misc{RISCVInstructionSet2019,
  title = {The {{RISC-V Instruction Set Manual}} - {{Volume I}}: {{Unprivileged ISA}}},
  year = {2019},
  month = dec,
  file = {/Users/u/Zotero/storage/NFQC9EEW/2019 - The RISC-V Instruction Set Manual - Volume I Unpr.pdf}
}

@misc{RISCVInstructionSetDocumentVersion20211203,
  title = {The {{RISC-V Instruction Set Manual}} - {{Volume II}}: {{Privileged Architecture}}},
  year = {Document Version 20211203},
  urldate = {2024-05-22},
  keywords = {archived},
  annotation = {https://web.archive.org/web/20240522064203/https://drive.google.com/file/d/1EMip5dZlnypTk7pt4WWUKmtjUKTOkBqh/view?usp=embed\_facebook},
  file = {/Users/u/Zotero/storage/N6TGCGX3/The RISC-V Instruction Set Manual - Volume II Pri.pdf}
}

@misc{RISCVInterpreter,
  title = {{{RISC-V Interpreter}}},
  urldate = {2024-04-06},
  howpublished = {http://www.cs.cornell.edu/courses/cs3410/2019sp/riscv/interpreter/},
  keywords = {archived},
  annotation = {https://web.archive.org/web/20240406052257/http://www.cs.cornell.edu/courses/cs3410/2019sp/riscv/interpreter/},
  file = {/Users/u/Zotero/storage/KF6MMJ3F/interpreter.html}
}

@misc{RISCVISADev,
  title = {{{RISC-V ISA Dev}} - {{Google Groups}}},
  urldate = {2024-05-22},
  howpublished = {https://groups.google.com/u/1/a/groups.riscv.org/g/isa-dev},
  keywords = {archived},
  annotation = {https://web.archive.org/web/20240522054642/https://groups.google.com/a/groups.riscv.org/g/isa-dev},
  file = {/Users/u/Zotero/storage/895EMDPZ/isa-dev.html}
}

@misc{RiscvLearn2024,
  title = {Riscv/Learn},
  year = {2024},
  month = apr,
  urldate = {2024-04-06},
  abstract = {Tracking RISC-V Actions on Education, Training, Courses, Monitorships, etc.},
  howpublished = {RISC-V},
  keywords = {archived}
}

@techreport{RISCVReference,
  title = {{{RISC-V Reference}}},
  urldate = {2024-04-06},
  keywords = {archived},
  annotation = {https://web.archive.org/web/20240606151346/https://www.cs.sfu.ca/{\textasciitilde}ashriram/Courses/CS295/assets/notebooks/RISCV/RISCV\_CARD.pdf},
  file = {/Users/u/Zotero/storage/DYSIJSC4/RISCV_CARD.pdf}
}

@misc{RISCVSimulator,
  title = {{{RISC-V Simulator}}},
  urldate = {2024-05-22},
  howpublished = {https://ascslab.org/research/briscv/simulator/simulator.html},
  file = {/Users/u/Zotero/storage/3ZP8LBFY/simulator.html}
}

@misc{RISCVSimulatora,
  title = {{{RISC-V Simulator}}},
  urldate = {2024-05-22},
  howpublished = {https://eduardomichell.github.io/rv-sim/},
  keywords = {archived},
  annotation = {https://web.archive.org/web/20240522055839/https://eduardomichell.github.io/rv-sim/},
  file = {/Users/u/Zotero/storage/H2FYGFQV/rv-sim.html}
}

@misc{RiscvsoftwaresrcRiscvisasim2024,
  title = {Riscv-Software-Src/Riscv-Isa-Sim},
  year = {2024},
  month = may,
  urldate = {2024-05-22},
  abstract = {Spike, a RISC-V ISA Simulator},
  howpublished = {RISC-V Software}
}

@misc{RISCVSWDev,
  title = {{{RISC-V SW Dev}} - {{Google Groups}}},
  urldate = {2024-05-22},
  howpublished = {https://groups.google.com/u/1/a/groups.riscv.org/g/sw-dev},
  keywords = {archived},
  annotation = {https://web.archive.org/web/20240522054640/https://groups.google.com/a/groups.riscv.org/g/sw-dev},
  file = {/Users/u/Zotero/storage/CQMEQWUX/sw-dev.html}
}

@misc{RISCVTeachGoogle,
  title = {{{RISC-V Teach}} - {{Google Groups}}},
  urldate = {2024-05-22},
  howpublished = {https://groups.google.com/a/groups.riscv.org/g/riscv-teach},
  keywords = {archived},
  annotation = {https://web.archive.org/web/20240522060029/https://groups.google.com/a/groups.riscv.org/g/riscv-teach},
  file = {/Users/u/Zotero/storage/LSXBH9LR/riscv-teach.html}
}

@misc{RISCVWorkingGroups,
  title = {{{RISC-V Working Groups Portal}}},
  urldate = {2024-05-22},
  abstract = {****************************** *RISC-V Working Groups Portal* ******************************  Welcome to the RISC-V Working Groups mailing list portal. RISC-V International is an open standard non-profit organization managing the IP and development activities for the RISC-V Instruction Set Architecture (ISA), an open standard hardware initiative that is rapidly transforming the way microprocessors are made. The primary website for the RISC-V architecture is at https://riscv.org. The mailing lists on this portal are moderated, members-only discussions related to the development of the RISC-V ISA. Technical discussion groups are visible in read-only form to everyone, while marketing and administrative groups are restricted to members only.  If you are not a member, you can view the archives using these steps:  1. Click Subgroups to the left 2. Choose a technical group to view 3. Click Messages to view the messages in that group  Posting to a mailing list requires membership in RISC-V. To learn more or to become a member of the RISC-V International community, please see https://riscv.org/membership-application. Details on using this portal are at https://riscv.org/community/working-with-the-member-portal/ ( https://riscv.org/community/working-with-the-member-portal/ )  ********************************** *RISC-V Members may log in below.*  **********************************  Participation in the groups on this portal is currently restricted to members who have signed membership agreement with RISC-V International.  * If your organization is *already a member* , you *do not need to sign* a new membership agreement. Send an email to main+subscribe@lists.riscv.org to request to be added to this portal.  * If your organization *would like to join RISC-V* , or if you would like to participate with an Individual membership, please visit the membership page ( https://riscv.org/membership )  * If you are not a RISC-V member but still want to read the mailing lists, follow the steps above to read the archives.  Once logged in, select Subgroups ( https://lists.riscv.org/subgroups ) (on the left) to view a list of available Subgroups for you to participate in.  There is also a set of public discussion lists that does not require membership. You can join these discussions here: https://riscv.org/technical/technical-forums/  Please send us email at info@riscv.org if you have any questions.},
  howpublished = {https://lists.riscv.org/g/main},
  langid = {american}
}

@misc{rog3rsm1thMyRISCVDevelopment2022,
  title = {My {{RISC-V}} Development Environment for Programming and Reverse Engineering Purposes},
  author = {Rog3rSm1th},
  year = {2022},
  month = jan,
  journal = {Rog3rSm1th},
  urldate = {2024-04-06},
  abstract = {How I set up a RISC-V development environment on my machine in order to develop RISC-V assembly programs and analyze RISC-V linux malwares.},
  chapter = {Programming; https://web.archive.org/web/20240406051915/https://rog3rsm1th.github.io/posts/set-up-risc-v-developpement-environment/},
  howpublished = {https://Rog3rSm1th.github.io/posts/set-up-risc-v-developpement-environment/},
  langid = {english},
  keywords = {archived},
  file = {/Users/u/Zotero/storage/INU7GRUJ/set-up-risc-v-developpement-environment.html}
}

@misc{royalMikeroyalRISCVGuide2024,
  title = {Mikeroyal/{{RISC-V-Guide}}},
  author = {Royal, Michael},
  year = {2024},
  month = apr,
  urldate = {2024-04-06},
  abstract = {RISC-V Guide. Learn all about the RISC-V computer architecture along with the Development Tools and Operating Systems to develop on RISC-V hardware.},
  keywords = {archived}
}

@misc{scalewayScalewayLaunchesIts2024,
  title = {Scaleway Launches Its {{RISC-V}} Servers in the Cloud a World First and a Firm Commitment to Technological Independence},
  author = {{Scaleway}},
  year = {2024},
  month = feb,
  journal = {Scaleway},
  urldate = {2024-06-04},
  abstract = {Scaleway launches its RISC-V servers in the cloud, a world first and a firm commitment to technological independence},
  howpublished = {https://www.scaleway.com/en/news/scaleway-launches-its-risc-v-servers-in-the-cloud-a-world-first-and-a-firm-commitment-to-technological-independence/},
  langid = {english},
  keywords = {archived},
  annotation = {https://web.archive.org/web/20240604014317/https://www.scaleway.com/en/news/scaleway-launches-its-risc-v-servers-in-the-cloud-a-world-first-and-a-firm-commitment-to-technological-independence/},
  file = {/Users/u/Zotero/storage/C8V9PLXE/scaleway-launches-its-risc-v-servers-in-the-cloud-a-world-first-and-a-firm-commitment-to-techno.html}
}

@misc{SearchBoardDBSingle,
  title = {Search - {{Board-DB}}: {{The Single Board Computer Database}}},
  urldate = {2024-05-22},
  howpublished = {https://hackerboards.com/?cpu\_architecture=RV64}
}

@inproceedings{soltCascadeCPUFuzzing2024,
  title = {Cascade: {{CPU Fuzzing}} via {{Intricate Program Generation}}},
  booktitle = {{{USENIX Security}} 2024},
  author = {Solt, Flavien and {Ceesay-Seitz}, Katharina and Razavi, Kaveh},
  year = {2024},
  abstract = {Generating interesting test cases for CPU fuzzing is akin to generating programs that exercise unusual states inside the CPU. The performance of CPU fuzzing is heavily influenced by the quality of these programs and by the overhead of bug detection. Our analysis of existing state-of-the-art CPU fuzzers shows that they generate programs that are either overly simple or execute a small fraction of their instructions due to invalid control flows. Combined with expensive instruction-granular bug detection mechanisms, this leads to inefficient fuzzing campaigns. We present Cascade, a new approach for generating valid RISC-V programs of arbitrary length with highly randomized and interdependent control and data flows. Cascade relies on a new technique called asymmetric ISA pre-simulation for entangling control flows with data flows when generating programs. This entanglement results in non-termination when a program triggers a bug in the target CPU, enabling Cascade to detect a CPU bug at program granularity without introducing any runtime overhead. Our evaluation shows that long Cascade programs are more effective in exercising the CPU's internal design. Cascade achieves 28.2x to 97x more coverage than the state-of-the-art CPU fuzzers and uncovers 37 new bugs (28 new CVEs) in 5 RISC-V CPUs with varying degrees of complexity. The programs that trigger these bugs are long and intricate, impeding triaging. To address this challenge, Cascade features an automated pruning method that reduces a program to a minimal number of instructions that trigger the bug.},
  langid = {english},
  file = {/Users/u/Zotero/storage/MRUGKJ33/Solt et al. - Cascade CPU Fuzzing via Intricate Program Generat.pdf}
}

@article{soltCascadeCPUFuzzinga,
  title = {Cascade: {{CPU Fuzzing}} via {{Intricate Program Generation}}},
  author = {Solt, Flavien and {Ceesay-Seitz}, Katharina and Razavi, Kaveh},
  abstract = {Generating interesting test cases for CPU fuzzing is akin to generating programs that exercise unusual states inside the CPU. The performance of CPU fuzzing is heavily influenced by the quality of these programs and by the overhead of bug detection. Our analysis of existing state-of-the-art CPU fuzzers shows that they generate programs that are either overly simple or execute a small fraction of their instructions due to invalid control flows. Combined with expensive instruction-granular bug detection mechanisms, this leads to inefficient fuzzing campaigns. We present Cascade, a new approach for generating valid RISC-V programs of arbitrary length with highly randomized and interdependent control and data flows. Cascade relies on a new technique called asymmetric ISA pre-simulation for entangling control flows with data flows when generating programs. This entanglement results in non-termination when a program triggers a bug in the target CPU, enabling Cascade to detect a CPU bug at program granularity without introducing any runtime overhead. Our evaluation shows that long Cascade programs are more effective in exercising the CPU's internal design. Cascade achieves 28.2x to 97x more coverage than the state-of-the-art CPU fuzzers and uncovers 37 new bugs (28 new CVEs) in 5 RISC-V CPUs with varying degrees of complexity. The programs that trigger these bugs are long and intricate, impeding triaging. To address this challenge, Cascade features an automated pruning method that reduces a program to a minimal number of instructions that trigger the bug.},
  langid = {english},
  file = {/Users/u/Zotero/storage/ADSMEAQU/Solt et al. - Cascade CPU Fuzzing via Intricate Program Generat.pdf}
}

@misc{SpecificationsRISCVInternational,
  title = {Specifications -- {{RISC-V International}}},
  urldate = {2024-05-22},
  langid = {american},
  keywords = {archived},
  annotation = {https://web.archive.org/web/20240522065734/https://riscv.org/technical/specifications/},
  file = {/Users/u/Zotero/storage/6P7GE9ZT/specifications.html}
}

@inproceedings{trippelFuzzingHardwareSoftware2022,
  title = {Fuzzing {{Hardware Like Software}}},
  booktitle = {{{USENIX Security}} 2022},
  author = {Trippel, Timothy and Shin, Kang G. and Chernyakhovsky, Alex and Kelly, Garret and Rizzo, Dominic and Hicks, Matthew},
  year = {2022},
  pages = {3237--3254},
  urldate = {2024-06-03},
  isbn = {978-1-939133-31-1},
  langid = {english},
  file = {/Users/u/Zotero/storage/QL58MDDY/Trippel et al. - 2022 - Fuzzing Hardware Like Software.pdf}
}

@misc{UnderstandingAssemblyPart,
  title = {Understanding {{Assembly Part I}}: {{RISC-V}} {$\cdot$} Mcyoung},
  shorttitle = {Understanding {{Assembly Part I}}},
  urldate = {2024-04-06},
  howpublished = {https://mcyoung.xyz/2021/11/29/assembly-1/},
  langid = {american},
  keywords = {archived},
  annotation = {https://web.archive.org/web/20240406052909/https://mcyoung.xyz/2021/11/29/assembly-1/},
  file = {/Users/u/Zotero/storage/9DXEGTHW/assembly-1.html}
}

@book{warrengayRISCVAssemblyLanguage2022,
  title = {{{RISC-V Assembly Language Programming}}: Using {{ESP32-C3}} and {{QEMU}}},
  shorttitle = {{{RISC-V Assembly Language Programming}}},
  author = {{Warren Gay}},
  year = {2022},
  series = {Elektorbooks},
  publisher = {Elektor},
  address = {Susteren},
  isbn = {978-3-89576-525-4},
  langid = {english}
}

@misc{WelcomeChipyardDocumentation,
  title = {Welcome to {{Chipyard}}'s Documentation (Version ``v?.?.?'')! --- {{Chipyard}} v?.?.? Documentation},
  urldate = {2024-04-06},
  howpublished = {https://chipyard.readthedocs.io/en/stable/},
  keywords = {archived},
  annotation = {https://web.archive.org/web/20240406052812/https://chipyard.readthedocs.io/en/stable/},
  file = {/Users/u/Zotero/storage/G7YTCASP/stable.html}
}
