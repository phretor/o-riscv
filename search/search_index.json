{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"O-RISC-V","text":"<p>O-RISC-V is short for \"Only RISC-V,\" a website where I collect RISC-V resources, with a focus on security aspects (one day). I decided to embark on a journey to learn RISC-V and creating this website to collect selected material is my first step. As I read and experiment, I plan to provide summaries and create concise hands-on tutorials.</p> <p>Download References </p>"},{"location":"#disclaimer","title":"Disclaimer","text":"<p>The content you'll find on this website is intended for educational purposes only, it may be inaccurate, so take with caution and always double check the source of the content. This is a personal project and by no means reflects the opinion or views of my employer.</p>"},{"location":"books/","title":"Books","text":"<p>So far, I've been reading the following books. I'll add more as I finish them.</p> <ul> <li>The RISC-V Reader: An Open Architecture Atlas <sup>1</sup> (2017) by David Patterson (RISC-V Foundation, Google, Berkeley), Andrew Waterman (SiFive). This is a relatively brief but dense introduction to the ISA, with a nicely organized visual representation of all instructions in just half a page! You'll learn the details of how instructions are encoded and admire the beauty of such a well-thought design.</li> <li>RISC-V Assembly Language Programming: using ESP32-C3 and QEMU <sup>2</sup> (2022) by Warren Gay is a hands-on, slow-paced, journey of the RV32/64 instructions through examples that you can run immediately on your computer (QEMU) or on real RICV-V silicon (ESP32-C3).</li> </ul> <ol> <li> <p>D. Patterson and A. Waterman, The RISC-V Reader: An Open Architecture Atlas. Berkeley, California: Strawberry Canyon, 2017.\u00a0\u21a9</p> </li> <li> <p>Warren Gay, RISC-V Assembly Language Programming: Using ESP32-C3 and QEMU. in Elektorbooks. Susteren: Elektor, 2022.\u00a0\u21a9</p> </li> </ol>"},{"location":"cloud/","title":"Cloud","text":"<p>To date, the following cloud providers offer RISC-V computing services.</p> <p>Download: <code>cloud.csv</code></p> ISA Provider Location Processor Manufacturer Core Platform Sources RV64GC+V Scaleway <sup>1</sup> France Alibaba T-Head TH1520 XuanTie XuanTie C910 C910 RV64IMAC Cloud-V <sup>2</sup> United States FU540 discontinued SiFive nan Freedom RV64GC Cloud-V <sup>2</sup> United States JH7100 StarFive SiFive U74 Rocket + BOOM RV64GC Cloud-V <sup>2</sup> United States JH7110 StarFive SiFive U74 Rocket + BOOM Mixed Cloud-V <sup>2</sup> United States <code>microchip-icicle-kit</code>, <code>shakti_{c,e,u}</code>, <code>spike</code>, <code>virt</code> QEMU <code>cpu.h</code> - <ol> <li> <p>Scaleway, \u201cScaleway launches its RISC-V servers in the cloud a world first and a firm commitment to technological independence,\u201d Scaleway. https://www.scaleway.com/en/news/scaleway-launches-its-risc-v-servers-in-the-cloud-a-world-first-and-a-firm-commitment-to-technological-independence/, 2024.\u00a0\u21a9</p> </li> <li> <p>RISC-V International, \u201cCloud-V: Accelerating RISC-V Software Development with 10xEngineers \u2013 RISC-V International.\u201d\u00a0\u21a9\u21a9\u21a9\u21a9</p> </li> </ol>"},{"location":"hardware/","title":"Hardware","text":"<p>Here's a summary table based on the most comprehensive and maintained lists of RISC-V implementations:</p> <ul> <li>Alex Bradbury compiled a list of commercially available RISC-V silicons <sup>1</sup> (last updated 2023-03-31).</li> <li>Aleksander Krimsky maintains a list of all commercially available RISC-V single-board computers <sup>2</sup> (last updated 2024-05-01).</li> <li>RISC-V Wikipedia page <sup>3</sup> (last updated 2024-05-24).</li> <li>RISC FIVE forum <sup>4</sup> (last updated: 2023-03-09).</li> </ul> <p>The list does not contain boards where the RISC-V block is not the main core (e.g., coprocessors).</p> <p>Download: <code>hardware.csv</code></p> ISA Custom Extensions Processor Manufacturer Core Platform Sources Die Photo Example Board RV32IMAC FE310 SiFive SiFive E31 Rocket HiFive 1 Rev B RV32IMAC GD32VF103 GigaDevice Nuclei Bumblebee N200 Nuclei Sipeed Longan Nano RV32IMC GAP8 GreenWaves PULP Wiki GAPuino RV32IMC GAP9 GreenWaves PULP Wiki GAP9 EVK RV32I+V RH850/U2B Renesas DENSO DR1000C Closed RV32IMC R9A02G020 Renesas AndesCore N22 Closed R9A02G020-EVK RV32IMC ESP32-C3 Espressif Unknown Closed 1, 2, 3, ... RV32IMC ESP32-C2 Espressif Unknown Closed pic RV32IMAC ESP32-C6 Espressif Unknown Closed RV32IM nan Hi3861 (discontinued) HiSilicon Unknown Closed Hi3861 RV32GC+P BL616/BL618 (discontinued?) Bouffalo Lab Unknown Closed Sipeed M0S RV32IMAFC nan BL602/BL604 Bouffalo Lab SiFive E24 Closed Pinecone RV32? nan AB32VG1 Bluetrum Unknown Closed AB32VG1 nan RV32IMAC+F nan CH583/CH582/CH581 WCH Unknown Closed CH583M nan ... ... ... ... ... ... RV64GC JH7100 StarFive SiFive U74 Rocket + BOOM VisionFive RV64GC JH7110 StarFive SiFive U74 Rocket + BOOM Pine64 Star64 RV64GC+V Alibaba T-Head TH1520 XuanTie XuanTie C910 C910 BeagleV\u00ae-Ahead <ol> <li> <p>Alex Bradbury, \u201cCommercially available RISC-V silicon,\u201d Muxup. https://muxup.com/2023q1/commercially-available-risc-v-silicon.\u00a0\u21a9</p> </li> <li> <p>Aleksander Krimsky, \u201cRISC-V Single Board Computers,\u201d Krimsky.net. http://krimsky.net/articles/riscvsbc.html.\u00a0\u21a9</p> </li> <li> <p>\u201cRISC-V,\u201d Wikipedia. https://en.wikipedia.org/wiki/RISC-V, May 2024.\u00a0\u21a9</p> </li> <li> <p>farseer, \u201cRISC-V \u2013 RISC-V Forum and Help,\u201d RISC-V. https://www.riscfive.com/.\u00a0\u21a9</p> </li> </ol>"},{"location":"research/","title":"Research","text":""},{"location":"research/#risc-v-fuzzing","title":"RISC-V Fuzzing","text":"Cascade (2024) ProcessorFuzz (2023) hw-fuzzing (2022) DifuzzRTL (2021) RFUZZ (2018) VexRiscv \ud83d\udfe2 (7 CVEs) PicoRV32 \ud83d\udfe2 (6 CVEs) Kronos \ud83d\udfe2 (6 CVEs) CVA6 \ud83d\udfe2 (8 CVEs) BOOM \ud83d\udfe2 (2 CVEs) \ud83d\udfe2 \ud83d\udfe2 (2 CVEs) Rocket \ud83d\udfe2 \ud83d\udfe2 \ud83d\udfe2 mor1kx \ud83d\udfe2 (3 CVEs) BlackParrot \ud83d\udfe2 Sodor \ud83d\udfe2 OpenTitan \ud83d\udfe2 <p>From a security standpoint, what makes RISC-V interesting is that the hardware definition of some IP cores is open source, which means that it can be formally verified and, best of all, fuzzed. Like software! The idea is \"simple\":</p> <ul> <li>compile the core into an executable format,</li> <li>shovel it into a simulator,</li> <li>randomize inputs (i.e., instructions and data),</li> <li>observe execution,</li> <li>measure coverage,</li> <li>repeat,</li> <li>...wait, what now?</li> </ul> <p>The design and implementation of such a fuzzer are quite challenging, mainly because, unlike with a traditional software program, it's difficult to define an oracle that tells us when a bug in a CPU design has been found, because a CPU just...interprets instructions based on state and data. It can't \"crash\". And if we observe a crash, most likely it's the simulator crashing. We don't yet have a precise way to tell whether the CPU being simulated and fuzzed is behaving according to the specs, or maybe according to the best golden model we have so far. Even in this case, is the golden model representative? What are we trying to compare against? We don't (yet!) have the choice of memory or address sanitizers like we have for fuzzers. In other words, there's a huge body of research, development, and hacking waiting to be unfolded. There exist the notion of coverage, which is good news.</p>"},{"location":"research/#papers-with-tools","title":"Papers with Tools","text":"<p>I selected the following papers because (1) the evaluation is done on RISC-V cores or a full processor, and (2) they come with code, so the results are reproducible. In some cases, they're used to continuously fuzz the RTL of the cores, like in the case of the work by Trippel et al., which, according to the authors (and this repository), their tool is used to fuzz Google's OpenTitan.</p> <ul> <li>Solt et al., Cascade: CPU Fuzzing via Intricate Program Generation, USENIX Security, 2024.<ul> <li>Tool: Cascade (Docker)</li> <li>Target RISC-V:<ul> <li>VexRiscv (SpinalHDL)</li> <li>PicoRV32 (Verilog)</li> <li>Kronos (Verilog)</li> <li>CVA6 (Verilog)</li> <li>BOOM (Chisel)</li> </ul> </li> </ul> </li> <li>Canakci et al., ProcessorFuzz: Processor Fuzzing with Control and Status Registers Guidance, IEEE HOST, 2023.<ul> <li>Tool: ProcessorFuzz (Docker)</li> <li>Target RISC-V:<ul> <li>BOOM (Chisel)</li> <li>BlackParrot (Verilog)</li> <li>Rocket (Verilog)</li> </ul> </li> </ul> </li> <li>Trippel et al., Fuzzing Hardware Like Software, USENIX Security, 2022.<ul> <li>Tool: googleintern/hw-fuzzing (Docker)</li> <li>Target RISC-V:<ul> <li>OpenTitan (AES, HMAC, KMAC, Timer)</li> </ul> </li> </ul> </li> <li>Hur et al., DifuzzRTL: Differential Fuzz Testing to Find CPU Bugs, IEEE S&amp;P, 2021.<ul> <li>Tool: DifuzzRTL</li> <li>Target RISC-V:<ul> <li>BOOM (Chisel)</li> <li>mor1kx (Verilog)</li> <li>Rocket (Verilog)</li> </ul> </li> </ul> </li> <li>Laeufer et al., RFUZZ: Coverage-Directed Fuzz Testing of RTL on FPGAs, IEEE/ACM ICCAD, 2018.<ul> <li>Tool: RFUZZ (VM)</li> <li>Target RISC-V:<ul> <li>Rocket (Verilog)</li> <li>Sodor (Chisel)</li> </ul> </li> </ul> </li> </ul>"},{"location":"research/#known-vulnerabilities-in-risc-v-designs","title":"Known Vulnerabilities in RISC-V Designs","text":"Design Id Bug Description CWE CVE Researcher VexRiscv V1 Non-deterministic conversion from single-precision <code>float</code> to <code>int</code> 681 2023-34885 Solt et al. VexRiscv V2 <code>fmin</code> with one <code>NaN</code> does not always return the other operand 193 2023-34895 Solt et al. VexRiscv V3 Conversion from <code>double</code> to <code>float</code> may pollute the mantissa 681 2023-34895 Solt et al. VexRiscv V4 Dependent arithmetic/<code>muldiv</code> FPU operations may yield incorrect results 193 2023-34887 Solt et al. VexRiscv V5 Equal registers may be considered distinct by <code>fle.s</code> and <code>feq.s</code> 697 2023-34883 Solt et al. VexRiscv V6 <code>flt.s</code> may return 1 when operands are equal 697 2023-34883 Solt et al. VexRiscv V7 Under some microarchitectural conditions, square root may be imprecise 1339 2023-34891 Solt et al. VexRiscv V8 Single-precision <code>muldiv</code> followed by conversion may pollute the mantissa 681 2023-34895 Solt et al. VexRiscv V9 Dependent arithmetic/<code>muldiv</code> operations may cause largely wrong output 682 2023-34891 Solt et al. VexRiscv V10 Operations on floating-point registers are authorized when FPU is disabled 1189 2023-34885 Solt et al. VexRiscv V11 Wrong access control to the FPU flags leaks information 1189 2023-34885 Solt et al. VexRiscv V12 Hang on speculatively executed compressed FPU instructions 1342 2023-34896 Solt et al. VexRiscv V13 Inaccurate instruction count when minstret is written by software 684 2023-40063 Solt et al. VexRiscv V14 Some register comparisons are still incorrect despite a partial fix 697 2023-34883 Solt et al. PicoRV32 P1 Accessing a non-implemented CSR causes the CPU to hang 1281 2023-34898 Solt et al. PicoRV32 P2 Spurious exceptions when reading mandatory CSRs 1281 2023-34898 Solt et al. PicoRV32 P3 Performance counters are not writable 284 2023-34900 Solt et al. PicoRV32 P4 Performance counters can only be read using some opcodes 284 2023-34900 Solt et al. PicoRV32 P5 Performance counter addresses are incorrect 684 2023-34913 Solt et al. PicoRV32 P6 Spurious exception when decoding fence instructions 705 2023-34899 Solt et al. Kronos K1 RaWaW double-hazard may cause a wrong register value to be forwarded 226 2023-34906 Solt et al. Kronos K2 Reading existing CSRs causes the CPU to hang in some uarch conditions 1281 2023-34901 Solt et al. Kronos K3 In some uarch conditions, no exception when writing inexistent CSRs 1281 2023-41210 Solt et al. Kronos K4 Inaccurate instruction count when minstret is written by software 684 2023-40066 Solt et al. Kronos K5 Incorrect decode logic for fence and <code>fence.i</code> 684 2023-34903 Solt et al. CVA6 C1 Double-precision multiplications yield wrong sign when rounding down 682 2023-34904 Solt et al. CVA6 C2 Single-precision floating-point operations may treat NaNs as zeros 684 2023-34906 Solt et al. CVA6 C3 Division by <code>NaN</code> incorrectly sets <code>NX</code> and <code>NV</code> flags 682 2023-34905 Solt et al. CVA6 C4 The inexact (<code>NX</code>) flag not set in case of overflow or underflow 684 2023-34905 Solt et al. CVA6 C5 Division of zero by zero incorrectly sets the <code>DZ</code> flag 684 2023-34905 Solt et al. CVA6 C6 Plus and Minus infinity microarchitectural structures are inverted 1221 2023-34910 Solt et al. CVA6 C7 Infinities are not rounded properly and stick to infinity 1339 2023-34910 Solt et al. CVA6 C8 Spurious exceptions when reading some performance counters 682 2023-34911 Solt et al. CVA6 C9 Wrong supervisor performance counter access control 684 2023-42311 Solt et al. CVA6 C10 Under some microarchitectural circumstances, wrong <code>NaN</code> conversion 682 2023-34908 Solt et al. BOOM B1 Static rounding is ignored for fdiv.s and <code>fsqrt.s</code> 1339 2023-34882 Solt et al. BOOM B2 Inaccurate instruction count when minstret is written by software 684 2023-40063 Solt et al. BOOM - Misaligned <code>lr</code> instruction on a cached line set the reservation 755 2020-29561 Hur et al. BOOM - Source field in <code>ProbeAckData</code> does not match the sink field of <code>ProbeRequest</code> - 2020-13251 Hur et al. mor1kx - Reservation is not cancelled when there is snooping hit between <code>lwa</code> and <code>swa</code> - 2020-13455 Hur et al. mor1kx - Misaligned <code>swa</code> raise exception when reservation is not set - 2020-13453 Hur et al. <p>Download: <code>cves.csv</code></p>"},{"location":"tutorials/","title":"Tutorials","text":""},{"location":"tutorials/#machine-level-programming","title":"Machine-level Programming","text":"<ul> <li>Bare metal programming with RISC-V guide</li> </ul> A minimal RV64I \"BIOS\" that writes <code>hello</code> on the UART line, a linker script to load the code at the reset vector <code>0x80000000</code> and run on a QEMU-emulated RISC-V machine. <ul> <li>RISC-V SBI and the full boot process</li> <li>Making a micro Linux distro</li> <li>789 KB Linux Without MMU on RISC-V</li> <li>Bare Metal Rust on RISC-V With Dynamic Memory</li> <li>RISC-V interrupts with a timer example</li> </ul>"},{"location":"tutorials/#os-level-programming","title":"OS-level Programming","text":"<ul> <li>My RISC-V development environment for programming and reverse engineering purposes</li> <li>Risc-V Assembly Language Hello World</li> </ul>"}]}